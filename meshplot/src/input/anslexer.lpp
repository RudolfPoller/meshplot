/*
 *  ansscanner.l
 *
 *  Created on: Apr. 28th, 2021
 *      Author: Dr. Rudolf Poller
 *
 *  Synopsis
 *  	flex lexical analyser definition file for processing FE mesh data
 *      stored in an Ansys input file (e.g. xxx.inp).
 *
 *	flex version: 2.6.4
 */
  
%option outfile="anslexer.cpp"
 
%option c++
%option prefix="ans"
%option debug

/*
 * The option noyywrap means that only one file will be processed
 * at a time.
 *
 * The option yylineno makes the declaration and follow-up of a
 * variable recording the current line number of the input unnecessary.
 *
 */

%option noyywrap
%option yylineno

%{

using namespace std;

#include "../meshplot.h"
#include "ansparser.tab.hpp"

/*
 * The macro YY_DECL determines the signature of the lexer (anslex()).
 *
 * It is relaced by its content in the file lex.yy.cc so that it will
 * be the heading line of the corresponding member function of the
 * class indicated in the macro definition.
 *
 * Without the definition below, the signature of yylex() will be the
 * default
 *
 *		int ansFlexLexer::yylex(void)
 *
 */

#define YY_DECL symbol_type ansMeshScanner::anslex(int dummy)
#define yyterminate() return static_cast<kind_type>(0)

using parser = ans::parser;
using symbol_type = parser::symbol_type;
using kind_type = parser::by_type::kind_type;

#include "ansparsescan.h"

%}

WSPC		[ \t]

EOLN		\r\n

NAME		[a-zA-Z][a-zA-Z0-9_]*

REALNUM		[+-]?[0-9]*"."[0-9]*([+-]?[eE][0-9]+)?
POSINT		[1-9][0-9]*
ZERO		0

C_COMMENT	"C***".*{EOLN}

CMD_NODE	N
CMD_ELEM	EN
CMD_ELTYPE  ET
CMD_TYPE	TYPE
CMD_TITLE	"/TITLE"

CMD_UNIMPL	LOCAL|MP|R|KEYOPT|MAT|REAL|ESYS|D|SFE|TREF|BF
CMD_OPER	("/"(PREP7|SOLUTION))|FINISH|ANTYPE|LSWRITE|LSSOLVE

LN_TITLE	^{CMD_TITLE}.*{EOLN}

LN_UNIMPL	^{CMD_UNIMPL}.*{EOLN}
LN_OPER		^{CMD_OPER}.*{EOLN}

COMMA		","

%%

{C_COMMENT}

{LN_UNIMPL}
{LN_OPER}

{CMD_NODE}		return parser::make_CMD_NODE();
{CMD_ELEM}		return parser::make_CMD_ELEM();		
{CMD_ELTYPE}	return parser::make_CMD_ELTYPE();			
{CMD_TYPE}		return parser::make_CMD_TYPE();
			
{LN_TITLE}		{ 
				  string title = yytext;
				  title.erase(0, title.find(',') + 1);
				  title.pop_back(); title.pop_back();
				  return parser::make_TITLE_TEXT(title);
				}
			
{NAME}			return parser::make_NAME(string(yytext));
			
{REALNUM}		return parser::make_REALNUM(atof(yytext));
{POSINT}		return parser::make_POSINT(atoi(yytext));
{ZERO}			return parser::make_ZERO();

{COMMA}			return parser::make_COMMA();

{WSPC}+

{EOLN}			return parser::make_EOLN();

.

%%
